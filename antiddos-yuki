#!/usr/bin/env bash
# Script is written to protect Linux servers.
# Enjoy! Made by yuki with love <3.

# --------------------------------

# Functions.

print_success() {
	if command -v lolcat &>/dev/null; then
		echo -e "✓ Success. $1" | lolcat
	else
		echo -e "${BGray}✓ Success. $1"
	fi
}

print_error() {
	if command -v lolcat &>/dev/null; then
		echo -e "✗ Fail. $1" | lolcat
	else
		echo -e "${BRed}✗ Fail. $1"
	fi
}

print_default() {
	if command -v lolcat &>/dev/null; then
		echo -e "$1" | lolcat
	else
		echo -e "${BGray}$1"
	fi
}

# ----------------------------------

# Verify whether the script is running with root privileges.

if [[ $EUID -ne 0 ]]; then
	print_error "The script must be run as root."
	exit 1
fi

# Distribution check.

# Check for the --skip_distro_check argument.
if [ "$1" != "--skip-distro-check" ]; then
    # Check the distribution
    if command -v lsb_release > /dev/null 2>&1; then
        distro=$(lsb_release -is)
    elif [ -e /etc/os-release ]; then
        distro=$(awk -F= '/^ID=/{print tolower($2)}' /etc/os-release)
    else
        print_error "Failed to determine the distribution. Make sure lsb-release is installed or /etc/os-release is accessible."
        exit 1
    fi
    
    case "$distro" in
        "Ubuntu" | "Debian")
            # The distribution is supported, no output.
            ;;
        *)
            print_error "Your distribution ($distro) is not supported. If you're sure this is an error, use --skip-distro-check and report it by opening an issue on GitHub."
            exit 1
            ;;
    esac
fi

# Check if all dependencies are installed.

dependencies=("iptables" "nftables" "ipset" "netfilter-persistent" "git")
missing_dependencies=()

for dependency in "${dependencies[@]}"; do
    if ! dpkg-query -W -f='${Status}' "$dependency" 2>/dev/null | grep -q "install ok installed"; then
        missing_dependencies+=("$dependency")
    fi
done

if [ "${#missing_dependencies[@]}" -gt 0 ]; then
    print_error "Not all dependencies are installed. Please run the following command to fix that:"
    echo "sudo apt install ${missing_dependencies[*]} -y"
    exit 1
fi

# Various checks of the config file.

CONFIG_FILE="config.sh"
GITHUB_REPO="https://raw.githubusercontent.com/yuk1c/antiddos/master"

# Check if config file exists.
if [ ! -f "$CONFIG_FILE" ]; then
    print_error "No config file found. Downloading it from GitHub..."
    
    # Download the config file from GitHub
    if wget -q "$GITHUB_REPO/$CONFIG_FILE" -O "$CONFIG_FILE"; then
        echo "Config file was downloaded successfully."
    else
        print_error "Unable to load config file from GitHub. Please check your internet connectivity and GitHub availability."
        exit 1
    fi
fi

# Check if config file is readable.
if [ ! -r "$CONFIG_FILE" ]; then
    print_error "$CONFIG_FILE is not readable. Please check file permissions."
    exit 1
fi

# Check if config file is not empty.
if [ ! -s "$CONFIG_FILE" ]; then
    print_error "$CONFIG_FILE is empty. Please provide configuration settings in the file."
    exit 1
fi

# Parse script arguments.
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --skip-update-check) SKIP_UPDATE_CHECK=true; shift ;;
        *) print_error "Unknown parameter passed: $1"; exit 1 ;;
    esac
done

# Store the script's directory.
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# If --skip_update_check is not present, check for updates.
if [ "$SKIP_UPDATE_CHECK" != "true" ]; then
    # Go to the script's directory
    cd "$SCRIPT_DIR"

    # Fetch updates from the remote repository.
    git fetch

    # Compare local branch with the remote branch.
    if [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]; then
        print_default "Updates available. Do you want to upgrade the script to continue? (y/n)"
        
        read -r response
        case "$response" in
            [yY])
                # Attempt to pull updates, handle errors quietly
                if ! git pull -q origin main; then
                    print_error "Unable to update script. You can skip the update check with the '--skip-update-check' argument if you think this is an mistake."
                    exit 1
                fi

                print_success "Script updated. Restarting..."
                exec "$SCRIPT_DIR/$(basename "$0")" "$@"  # Restart the updated script with the original arguments
                exit 0  # Make sure to exit after the exec command
                ;;

            [nN])
                print_default "You chose not to upgrade. You can skip the update check with the '--skip-update-check' argument."
                exit 1
                ;;
            *)
                print_error "Incorrect answer."
                exit 1
                ;;
        esac
    fi
fi

# --------------------------------

. config.sh

# Flush all rules and add a 'filter' table.
 "$NFT" flush ruleset
 "$NFT" add table filter > /dev/null 2>&1 &

# Delete the "blacklist" ip set.
 "$IPS" destroy blacklist > /dev/null 2>&1 &

# Backup sysctl.conf.
# It's located in /etc.
 cp /etc/sysctl.conf{,.backup} > /dev/null 2>&1 &

# --------------------------------

# Set default input policy to DROP.
# Drop policy swiftly deals with any unwanted traffic.
 "$IP" -P INPUT DROP

# Allow the local interface.
 "$IP" -A INPUT -i lo -s 127.0.0.0/8 -j ACCEPT

# Allow established and related connections.
 "$IP" -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow SSH. You can implement whitelisting in here.
 "$IP" -A INPUT -p tcp --dport "$SSH" -j ACCEPT

# Allow some protocols. This is optional, but may be needed in some cases.
# "$IP" -A INPUT -p mptcp -j ACCEPT - If you need mptcp
# "$IP" -A INPUT -p igmp -j ACCEPT  - If you need igmp
# "$IP" -A INPUT -p gre -j ACCEPT   - If you need gre
# "$IP" -A INPUT -p esp -j ACCEPT   - If you need esp (IPsec)
# "$IP" -A INPUT -p ah -j ACCEPT    - If you need ah (IPsec)

# --------------------------------
# Firewall ruleset.

# Mitigate some TCP Floods with hashlimits.
# You can try to set srcmask lower than /32.
# It will limit not only the source-IP, but also IPs from the netmask.
# Also, you can configure dstmask to protect your IP neighbors.
# ----------------------------------------------------------------
 "$IP" -t raw -A PREROUTING -p tcp --syn \
  -m hashlimit --hashlimit-mode srcip --hashlimit-srcmask 32 \
  --hashlimit-dstmask 32 --hashlimit-name synflood \
  --hashlimit-above "$SPL" --hashlimit-htable-expire "$HTE" \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max "$HTM" -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,ACK SYN,ACK \
  -m hashlimit --hashlimit-mode srcip --hashlimit-srcmask 32 \
  --hashlimit-dstmask 32 --hashlimit-name synackflood \
  --hashlimit-above "$SAPL" --hashlimit-burst 2 \
  --hashlimit-htable-expire "$HTE" --hashlimit-htable-size "$HTS" \
  --hashlimit-htable-max "$HTM" -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags RST RST \
  -m hashlimit --hashlimit-mode srcip --hashlimit-srcmask 32 \
  --hashlimit-dstmask 32 --hashlimit-name rstflood \
  --hashlimit-above "$RPL" --hashlimit-burst 2 --hashlimit-htable-expire "$HTE" \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max "$HTM" -j DROP

# Mitigate UDP Floods with hashlimit.
# ----------------------------------------------------------------
 "$IP" -t raw -A PREROUTING -p udp -m hashlimit --hashlimit-above "$UPL" \
  --hashlimit-mode srcip --hashlimit-srcmask 32 --hashlimit-dstmask 32 \
  --hashlimit-name udp-flood-limit --hashlimit-burst "$UPL" \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max 65536 \
  --hashlimit-htable-expire "$HTE" -j DROP

# Mitigate ICMP Floods with hashlimits. Also, block some ICMP types for enhanced security.
# ----------------------------------------------------------------
 "$IP" -t raw -A PREROUTING -p icmp -m comment --comment "ICMP hashlimit" -m hashlimit \
  --hashlimit-mode srcip --hashlimit-srcmask 32 --hashlimit-dstmask 32 \
  --hashlimit-name icmp-limit --hashlimit-above "$IPL" --hashlimit-burst 2 \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max 65536 \
  --hashlimit-htable-expire "$HTE" -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type address-mask-request -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type router-solicitation -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type timestamp-request -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type redirect -j DROP

# To relieve server load during UDP Floods, restrict the outgoing ICMP 'Port-Unreach' packets per second (PPS).
# ----------------------------------------------------------------
 "$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -m limit --limit "$OPL" --limit-burst 2 -j ACCEPT
 "$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -j DROP

# To relieve server load during TCP Out-Of-State Floods, restrict the outgoing TCP RST packets per second (PPS).
# ----------------------------------------------------------------
 "$IP" -t raw -A OUTPUT -p tcp --tcp-flags RST RST -m limit --limit "$OTRL" -j ACCEPT
 "$IP" -t raw -A OUTPUT -p tcp --tcp-flags RST RST -j DROP

# Enhance security and block basic attacks by filtering TCP packets with invalid flag combinations.
# If you're trying to optimize the ruleset, you can comment all except ALL/NONE and ALL/ALL.
# ----------------------------------------------------------------
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL NONE -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL ALL -j "$ITFPA"

# Safeguard against CPU overload during AMP DDoS attacks by limiting DNS/NTP packets per second (PPS).
# ----------------------------------------------------------------
 "$IP" -t raw -A PREROUTING -p udp -m multiport --sports "$LUSP" -m hashlimit \
  --hashlimit-mode srcip,srcport --hashlimit-name Amplification-Limit \
  --hashlimit-above 256/m -j DROP

# Drop SYNs with src-port <1024 to prevent many attack types.
# ----------------------------------------------------------------
 "$IP" -t raw -I PREROUTING -p tcp --syn ! --sport 1024:65535 -m comment --comment "SYN: Invalid Source Port" -j DROP

# Drop packets with zero payloads.
# ----------------------------------------------------------------
 "$IP" -t raw -A PREROUTING -m string --algo bm --string "0x00000" -j DROP

# Drop all invalid packets.
# ----------------------------------------------------------------
 "$IP" -t mangle -I PREROUTING -p all -m conntrack --ctstate "$ST" -m comment --comment "Packet State Filter" -j DROP

# Restrict the number of connections per IP to mitigate the impact of Handshake and Slowloris attacks.
# ----------------------------------------------------------------
 "$IP" -t mangle -A PREROUTING -p tcp -m connlimit --connlimit-above "$CL" --connlimit-mask 32 \
  -m comment --comment "Connection Limit" -j "$CLA"

# Drop new non-SYN TCP packets to mitigate common TCP attacks.
# If you're trying to optimize the ruleset, check this rule. It may affect performance.
# ----------------------------------------------------------------
 "$IP" -t mangle -I PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -m comment --comment "State NEW but not SYN" -j DROP

# Drop TCP packets with invalid MSS to mitigate certain attack types.
# Try to set max MSS to 8960 if you wanna more stricter protection.
# But then you'll need to modify the rule and do this only for your NIC.
# ----------------------------------------------------------------
 "$IP" -t mangle -I PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss "$MSS" -m comment --comment "Invalid MSS" -j DROP

# Limit SYN/ICMPv6 packets per second (PPS) & drop fragmented packets to mitigate certain IPv6 attacks, although they are not currently common.
# ----------------------------------------------------------------
 "$IP6" -t raw -A PREROUTING -p icmpv6 -m limit --limit 3/s -j ACCEPT
 "$IP6" -t raw -A PREROUTING -p icmpv6 -j DROP
 "$IP6" -t raw -A PREROUTING -p tcp --syn -m limit --limit 7/s --limit-burst 4 -j ACCEPT
 "$IP6" -t raw -A PREROUTING -p tcp --syn -j DROP
 "$IP6" -t raw -A PREROUTING -m frag -j DROP

# Block some multicast IPs, censys IPs, shodan IPs...
# We use a big hash size, so it doesn't affect performance.
# ----------------------------------------------------------------
"$IPS" create blacklist nethash hashsize 260000 > /dev/null 2>&1
while IFS= read -r bad_ip; do
    "$IPS" add blacklist "$bad_ip" > /dev/null 2>&1
done <"./blacklist"
"$IP" -t raw -A PREROUTING -m set --match-set blacklist src -j "$IBA" > /dev/null 2>&1

# Optional rules. We aren't providing any support for them.
# ----------------------------------------------------------------

#################
# Generic rules #
#################

# Filtering by TCP options.
# "$IP" -t raw -A PREROUTING -p tcp --tcp-option 1 -j DROP (NOP/RFC9293)
# "$IP" -t raw -A PREROUTING -p tcp --tcp-option 3 -j DROP (WinScale/RFC7372)
# "$IP" -t raw -A PREROUTING -p tcp --tcp-option 5 -j DROP (SACK/RFC2018)
# "$IP" -t raw -A PREROUTING -p tcp --tcp-option 8 -j DROP (Timestamps/RFC7323)
# "$IP" -t raw -A PREROUTING -p tcp --tcp-option 27 -j DROP (QuickStartResp/RFC7882)
# "$IP" -t raw -A PREROUTING -p tcp --tcp-option 34 -j DROP (TFO Cookie)

# Filtering by ECN bits.
# Note: These packets are also legitimate. (ece/cwr)
# "$IP" -t raw -A PREROUTING -p tcp -m ecn --ecn-tcp-ece -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m ecn --ecn-tcp-cwr -j DROP

# Drop SQL Injection attempts. These rules needs to be configured in case you want to use them.
# "$IP" -A INPUT -p tcp --dport 3306 -m string --string "union select" --algo bm -j DROP
# "$IP" -A INPUT -p tcp --dport 3306 -m string --string "information_schema" --algo bm -j DROP

# Block HTTP 1.1 packets received on non-HTTP port(s). (common attack pattern)
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string ! --string "HTTP/1.1 OK" --algo kmp -j DROP

# Block malformed DNS flood. (new DDoS methods)
# "$IP" -t raw -A PREROUTING -p udp --sport 53 -m string --string "Refused" --algo bm -j DROP
# "$IP" -t raw -A PREROUTING -p udp --sport 53 -m string --string "0000000000000000" --algo bm -j DROP
# "$IP" -t raw -A PREROUTING -p udp --sport 53 -m string --hex-string "|3000300030003000300030003000300030003000300030003000|" --algo bm -j DROP

# Prevent NTP Reflection attacks by blocking incoming NTP Reflection packets.
# "$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "0>>22&0x3C@8&0xFF" -j DROP

# SYN and ACK Challenge.
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN SYN -j TCPMSS --clamp-mss-to-pmtu
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL ACK -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL RST,ACK -j DROP

# SourcePort;ProtocolFilter against some attacks.
# The last rule may cause problems with apt.
# "$IP" -t raw -A PREROUTING -p udp --sport 53 -m string ! --string "DNS" --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p udp --sport 123 -m string ! --string "NTP" --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --sport 80 -m string ! --string "HTTP" --algo kmp -j DROP

# Patch some random attack.
# "$IP" -t raw -A PReROUTING -p tcp --tcp-flags ALL SYN -m u32 --u32 "0>>22&0x3C@12>>26&0x3F=0" -j DROP

# SYN/ACK Reflection block.
# "$IP" -t mangle -A PREROUTING -p tcp --syn -m recent --name blacklist --set -j DROP
# "$IP" -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,ACK -m recent --name blacklist --rcheck --seconds 60 --hitcount 10 -j DROP

# Drop ACK-PSH Packets without any data.
# Shouldn't cause problems because these packets aren't legitimate.
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -m u32 --u32 "0>>22&0x3C@12=0" -j DROP

# [BETA] Drop TFO (TCP Fast Open) Packets. (SYN with data)
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN SYN -m u32 --u32 "12&0xFFFF=0x0" -j DROP

# Length filter. Allows only packets with correct length.
# Max is 1500, you may have 9000 MTU - in this case you should set 9000 as a max value.
# "$IP" -t raw -A PREROUTING -p tcp -m length ! --length 40:1500 -j DROP
# "$IP" -t raw -A PREROUTING -p udp -m length ! --length 20:1500 -j DROP
# "$IP" -t raw -A PREROUTING -p icmp -m length ! --length 64:72 -j DROP

##################
# OpenVPN Shield #
##################

# Whitelisting.
# "$IP" -t raw -I PREROUTING -p <tcp/udp> --dport 1194 ! -s <trusted_ip> -j DROP

# Application-layer filter. (UDP)
# "$IP" -t mangle -A PREROUTING -p udp --dport 1194 --match bpf --bytecode "16,48 0 0 0,84 0 0 240,21 0 12 64,48 0 0 9,21 0 10 17,40 0 0 6,69 8 0 8191,177 0 0 0,80 0 0 8,21 0 5 56,64 0 0 17,21 0 3 1,72 0 0 4,21 0 1 62,6 0 0 65535,6 0 0 0" -m conntrack --ctstate NEW -m hashlimit --hashlimit-upto 1/second --hashlimit-burst 1 --hashlimit-mode srcip --hashlimit-name accept-openvpn -j ACCEPT

# Conntrack entity (entry) count limiter.
# "$IP" -t mangle -A PREROUTING -p udp --dport 1194 -m connlimit --connlimit-above 2 -j DROP

##############
# SSH Shield #
##############

# Anti-socket method protection.
# "$IP" -t mangle -A PREROUTING -p tcp --dport "$SSH" -m connlimit --connlimit-above 3 -j REJECT

###############
# HTTP Shield #
###############

# Connlimit-based protection for HTTP/HTTPS server(s).
# "$IP" -A INPUT -p tcp --dport 80 -m connlimit --connlimit-above 20 --connlimit-mask 32 -j DROP
# "$IP" -A INPUT -p tcp --dport 443 -m connlimit --connlimit-above 20 --connlimit-mask 32 -j DROP

# User-agent filtering.
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'python-requests' --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'benchmark' --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'MD5(' --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'censys' --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'inspect' --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'scanner' --algo kmp -j DROP
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'shodan' --algo kmp -j DROP

# Drop SSL packets.
# "$IP" -A INPUT -p tcp --dport 443 -m string --string "SSL" --algo bm -j DROP

# Drop "trace" HTTP method packets.
# "$IP" -A INPUT -p tcp --dport 80 -m string --string "TRACE" --algo bm -j DROP

######################
# AntiSpoofing rules #
######################

# "$IP" -t raw -A PREROUTING -m ipv4options --ssrr -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --lsrr -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --rr -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --ts -j DROP
# "$IP" -t raw -A PREROUTING -m ipv4options --ra -j DROP

# Advanced AntiSpoofing [NOT RECOMMENDED]
# "$IP" -A INPUT -p all ! -d <ip_of_your_server> -j DROP

###############
# Other rules #
###############

# Drop SIP server scans.
# "$IP" -A INPUT -p udp --dport 5060 -m string --string "sipvicious" --algo bm -j DROP
# "$IP" -A INPUT -p udp --dport 5060 -m string --string "friendly-scanner" --algo bm -j DROP

# Drop SMTP packets with malicious payload.
# "$IP" -t raw -A PREROUTING -p tcp --dport 25 -m string --string "HELO" --algo bm --to 65535 -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --dport 25 -m string --string "EHLO" --algo bm --to 65535 -j DROP

# Drop packets of BitTorrent amplification.
# "$IP" -t raw -A PREROUTING -m string --string "Torrent" --algo bm -j DROP

# Drop FTP packets with malicious payload.
# "$IP" -t raw -A PREROUTING -p tcp --dport 21 -m string --string "SITE EXEC" --algo bm -j DROP

# Drop DNS recursion/zone transfer operations packets.
# "$IP" -t raw -A PREROUTING -p udp --dport 53 -m string --string "recursion" --algo bm -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --dport 53 -m string --hex-string "|0d 0a 0d 0a|" --algo bm -j DROP

# Geo blocking (in this rule, we block China, for example).
# "$IP" -t raw -I PREROUTING -m geoip --src-cc CN -j DROP

# Drop packets sent to DNS/NTP port but which are not DNS/NTP packets.
# You can make multiple rules like that.
# "$IP" -t raw -A PREROUTING -p udp --dport 53 -m udp -m string ! --string "DNS" --algo bm --to 65535 -j ACCEPT
# "$IP" -t raw -A PREROUTING -p udp --dport 123 -m udp -m string ! --string "NTP" --algo bm --to 65535 -j ACCEPT

# Block heartbleed (1) / shellshock (2) attacks.
# "$IP" -t raw -A PREROUTING -p tcp --dport 443 -m u32 --u32 "52=0x18030000 && 56=0x00000000" -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --dport 80 -m string --algo bm --string '() {' -j DROP

# Proxy with iptables. (example: redirect TCP packets from 25565 to your home 25500)
# "$IP" -t nat -A PREROUTING -i eth0 -p tcp --dport 25565 -j DNAT --to-destination your_home_ip:25500
# "$IP" -t nat -A POSTROUTING -o eth0 -p tcp --dport 25565 -d your_home_ip -j SNAT --to-source your_server_ext_IP

# Another patch against some weird attacks.
# "$IP" -t raw -A PREROUTING -p icmp --icmp-type 3/4 -j DROP

# Block all protocols except TCP.
# VERY Not recommended! Shouldn't be used always.
# "$IP" -A INPUT ! -p tcp -j DROP

# [BETA] Arptables ARP Flood patch.
# arptables -A INPUT --limit-rate 3/s --limit-burst 20 -j ACCEPT

# TCP Ratelimit (All flags).
# Using this rule may make other TCP rate limits redundant or conflicting. Evaluate your ruleset accordingly.
# "$IP" -t raw -A PREROUTING -p tcp -m hashlimit --hashlimit-name tcp --hashlimit-mode srcip --hashlimit --hashlimit-above 10000/s -j DROP

# Block some unusual attacks by blocking zero TTL.
# "$IP" -t raw -A PREROUTING -m ttl --ttl-eq 0 -j DROP

# Block source-ports 0, 1 because they don't serve a legitimate purpose.
# "$IP" -t raw -A PREROUTING -p tcp -m multiport --sports 0,1 -j DROP
# "$IP" -t raw -A PREROUTING -p udp -m multiport --sports 0,1 -j DROP

# ACK & ACK-PSH Limits (against most TCP bypasses).
# Please note that these rules can impact legitimate traffic due to their strict nature.
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK ACK -m hashlimit --hashlimit-mode srcip --hashlimit-name ackflood --hashlimit-above 1000/s --hashlimit-burst 2 -j DROP
# "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH ACK,PSH -m hashlimit --hashlimit-mode srcip --hashlimit-name ackpshflood --hashlimit-above 1000/s --hashlimit-burst 2 -j DROP

# Block STUN by sport or string. You can combine them into one rule or use together.
# "$IP" -t raw -A PREROUTING -p udp --sport 3478 -j DROP
# "$IP" -t raw -A PREROUTING -p udp -m string --string "STUN" --algo kmp -j DROP

# Limit connection establishing speed. (per source IP) (we don't use --rsource because it is already set by default)
# Limiting upto 30 SYN_RECV per 5s from each new IP.
# "$IP" -t raw -A PREROUTING -p tcp --syn -m conntrack --ctstate NEW -m recent --set
# "$IP" -t raw -A PREROUTING -p tcp --syn -m conntrack --ctstate NEW -m recent --update --rcheck --rttl --seconds 5 --hitcount 30 

# Filtering by source IP address routing type.
# It wasn't tested a lot and may do nothing.
# "$IP" -t mangle -A PREROUTING -m addrtype --src-type UNREACHABLE -j DROP
# "$IP" -t mangle -A PREROUTING -m addrtype --src-type BLACKHOLE -j DROP
# "$IP" -t mangle -A PREROUTING -m addrtype --src-type MULTICAST -j DROP
# "$IP" -t mangle -A PREROUTING -m addrtype --src-type THROW -j DROP

# Filtering by conntrack status.
# Drops the packet if it has no known conntrack status.
# "$IP" -t mangle -A PREROUTING -p all -m conntrack --ctstatus NONE -j DROP

# --------------------------------

###############
#   Logging   #
###############

# If you want to enable logging to dmesg, uncomment the following first rule:

# The rule below limits logging to 5 messages per second:
# "$IP" -A INPUT -m limit --limit 5/m -j LOG --log-prefix "[yuki-script] DROP:" --log-ip-options --log-tcp-options --log-tcp-sequence

# The rule below actually drops packets:
 "$IP" -A INPUT -j DROP

# Sysctl.conf tweaks
# --------------------------------

echo -e "
#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

#kernel.domainname = example.com

#
# Tweaks by https://github.com/yuk1c/antiddos
#


# Custom conntrack timeouts - specially against DDoS attacks.
# --------------------------------
 net.netfilter.nf_conntrack_tcp_timeout_last_ack = 10
 net.netfilter.nf_conntrack_tcp_timeout_close = 5
 net.netfilter.nf_conntrack_tcp_timeout_close_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_time_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
 net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
 net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 25
 net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 20
 net.netfilter.nf_conntrack_generic_timeout = 300
 net.netfilter.nf_conntrack_udp_timeout = 10
 net.netfilter.nf_conntrack_icmp_timeout = 2
 net.netfilter.nf_conntrack_icmpv6_timeout = 3

# Enabling SYN-Cookies.
# Facilitates SYN Flood DDoS mitigation.
# If your server frequently faces TCP DDoS attacks,
# you can set the value to '2' here.
# Caution: certain hosting providers might block syncookies.
# Verify if your hoster enforces this. If yes, set it to '0'.
# --------------------------------
 net.ipv4.tcp_syncookies = 1

# Set custom SYN/SYN-ACK retries count.
# Helps in TCP DDoS mitigation.
# Try 1/1 instead of 2/2 if you have time for testing :)
# --------------------------------
 net.ipv4.tcp_synack_retries = 2
 net.ipv4.tcp_syn_retries = 2

# Set custom NIC rmem/wmem buffer size.
# --------------------------------
 net.core.rmem_max = 33554432
 net.core.wmem_max = 33554432

# Network security hardening.
# Usually causes problems on routers.
# --------------------------------
 net.ipv4.conf.all.accept_redirects = 0
 net.ipv4.conf.all.secure_redirects = 0
 net.ipv4.conf.all.send_redirects = 0
 net.ipv4.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_ra = 0
 net.ipv4.conf.all.secure_redirects = 1
 net.ipv6.conf.all.drop_unsolicited_na = 1
 net.ipv6.conf.all.use_tempaddr = 2
 net.ipv4.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.default.dad_transmits = 0
 net.ipv6.conf.default.autoconf = 0
 # net.ipv4.ip_forward = 0 # Disables ip_forward (blocks VPNs/NATs)
 # net.ipv4.ip_no_pmtu_disc = 3 # Hardened PMTU Discover Mode (usually not needed)

# Prevent ARP Spoofing.
# --------------------------------
 net.ipv4.conf.all.drop_gratuitous_arp = 1
 net.ipv4.conf.all.arp_ignore = 1
 net.ipv4.conf.all.arp_filter = 1

# Disable IGMP Multicast reports.
# --------------------------------
 net.ipv4.igmp_link_local_mcast_reports = 0

# Overall security hardening.
# --------------------------------
 kernel.dmesg_restrict = 1
 kernel.kptr_restrict = 1
 fs.protected_symlinks = 1
 fs.protected_hardlinks = 1
 fs.protected_fifos = 2
 fs.protected_regular = 2
 kernel.unprivileged_bpf_disabled = 1
 kernel.unprivileged_userns_clone = 0
 kernel.printk = 3 3 3 3
 net.core.bpf_jit_harden = 2
 vm.unprivileged_userfaultfd = 0
 kernel.kexec_load_disabled = 1
 #kernel.sysrq = 0 # Disables sysrq (not recommended)

# Performance tuning.
# Set somaxconn to 3240000 if you have a very powerful server.
# Your server would then manage over 3 million connections. 0_0
# Additionally, you can activate commented-out settings at the end (in this scenario).
# We've also disabled checksum verification in NF because the NIC usually already calculates checksums.
# --------------------------------
 kernel.sched_tunable_scaling = 1
 kernel.shmmax = 268435456
 net.ipv4.tcp_tw_reuse = 1
 vm.swappiness = 20
 net.core.somaxconn = 32000
 net.ipv4.tcp_keepalive_probes = 5
 net.netfilter.nf_conntrack_checksum = 0
 # Tweaks for very powerful servers
 # net.ipv4.tcp_max_tw_buckets = 600000000
 # net.core.netdev_max_backlog = 50000
 # net.ipv4.tcp_max_syn_backlog = 3240000

# Set max conntrack table size.
# --------------------------------
 net.nf_conntrack_max = 20971520
 net.netfilter.nf_conntrack_max = 20971520

# Enable ExecShield to block some remote attacks.
# --------------------------------
 kernel.exec-shield = 2

# Don't log bogus ICMP responses.
# --------------------------------
 net.ipv4.icmp_ignore_bogus_error_responses = 1

# Allow to use more ports as a s-ports.
# --------------------------------
 net.ipv4.ip_local_port_range=1024 65535

# Conntrack strict mode.
# --------------------------------
 net.netfilter.nf_conntrack_tcp_loose = 0

# Reverse-path filter.
# You should set '1' to '2' if you're using an assymetric routing.
# --------------------------------
 net.ipv4.conf.all.rp_filter = 1

# Custom ratelimit for invalid TCP packets.
# --------------------------------
net.ipv4.tcp_invalid_ratelimit = 1000" > /etc/sysctl.conf

"$SC" -p > /dev/null 2>&1 &
"$IPS" save > /dev/null 2>&1 &
systemctl enable --now netfilter-persistent > /dev/null 2>&1 &
clear

if [ "$autosave" = true ]; then
 netfilter-persistent save > /dev/null 2>&1 clear
 message="All script changes were applied. No action required."
else
 message="Script changes applied, but rules aren't saved.\
 Check the network now: If it works OK, do 'sudo netfilter-persistent save'."
fi

print_success "$message"
echo -e "${BGray}"
echo -e "The 'Drop' policy blocks all incoming traffic that isn't explicitly allowed (SSH is already allowed).
To allow a specific TCP port, use: 'iptables-nft -A INPUT -p tcp --dport PORT -j ACCEPT'
For UDP ports, use: 'iptables-nft -A INPUT -p udp --dport PORT -j ACCEPT'
You can also check the current rules and their statistics with: 'nft list ruleset'"

# Reset terminal color and exit.
tput sgr0
exit 0

# if you want to delete a rule - replace -A (or -I) with -D and apply.